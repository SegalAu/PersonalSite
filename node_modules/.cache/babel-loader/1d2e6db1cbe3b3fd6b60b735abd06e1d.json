{"ast":null,"code":"var global = require('./$.global'),\n    core = require('./$.core'),\n    hide = require('./$.hide'),\n    redefine = require('./$.redefine'),\n    ctx = require('./$.ctx'),\n    PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F,\n      IS_GLOBAL = type & $export.G,\n      IS_STATIC = type & $export.S,\n      IS_PROTO = type & $export.P,\n      IS_BIND = type & $export.B,\n      target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE],\n      exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),\n      expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {}),\n      key,\n      own,\n      out,\n      exp;\n  if (IS_GLOBAL) source = name;\n\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && key in target; // export native or passed\n\n    out = (own ? target : source)[key]; // bind timers to global for call from export context\n\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // extend global\n\n    if (target && !own) redefine(target, key, out); // export\n\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\n\nglobal.core = core; // type bitmap\n\n$export.F = 1; // forced\n\n$export.G = 2; // global\n\n$export.S = 4; // static\n\n$export.P = 8; // proto\n\n$export.B = 16; // bind\n\n$export.W = 32; // wrap\n\nmodule.exports = $export;","map":null,"metadata":{},"sourceType":"script"}