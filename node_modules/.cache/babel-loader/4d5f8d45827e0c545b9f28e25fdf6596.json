{"ast":null,"code":"/*!\r\n * \r\n *   typed.js - A JavaScript Typing Animation Library\r\n *   Author: Matt Boldt <me@mattboldt.com>\r\n *   Version: v2.0.11\r\n *   Url: https://github.com/mattboldt/typed.js\r\n *   License(s): MIT\r\n * \r\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports[\"Typed\"] = factory();else root[\"Typed\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if ('value' in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError('Cannot call a class as a function');\n        }\n      }\n\n      var _initializerJs = __webpack_require__(1);\n\n      var _htmlParserJs = __webpack_require__(3);\n      /**\r\n       * Welcome to Typed.js!\r\n       * @param {string} elementId HTML element ID _OR_ HTML element\r\n       * @param {object} options options object\r\n       * @returns {object} a new Typed object\r\n       */\n\n\n      var Typed = function () {\n        function Typed(elementId, options) {\n          _classCallCheck(this, Typed); // Initialize it up\n\n\n          _initializerJs.initializer.load(this, options, elementId); // All systems go!\n\n\n          this.begin();\n        }\n        /**\r\n         * Toggle start() and stop() of the Typed instance\r\n         * @public\r\n         */\n\n\n        _createClass(Typed, [{\n          key: 'toggle',\n          value: function toggle() {\n            this.pause.status ? this.start() : this.stop();\n          }\n          /**\r\n           * Stop typing / backspacing and enable cursor blinking\r\n           * @public\r\n           */\n\n        }, {\n          key: 'stop',\n          value: function stop() {\n            if (this.typingComplete) return;\n            if (this.pause.status) return;\n            this.toggleBlinking(true);\n            this.pause.status = true;\n            this.options.onStop(this.arrayPos, this);\n          }\n          /**\r\n           * Start typing / backspacing after being stopped\r\n           * @public\r\n           */\n\n        }, {\n          key: 'start',\n          value: function start() {\n            if (this.typingComplete) return;\n            if (!this.pause.status) return;\n            this.pause.status = false;\n\n            if (this.pause.typewrite) {\n              this.typewrite(this.pause.curString, this.pause.curStrPos);\n            } else {\n              this.backspace(this.pause.curString, this.pause.curStrPos);\n            }\n\n            this.options.onStart(this.arrayPos, this);\n          }\n          /**\r\n           * Destroy this instance of Typed\r\n           * @public\r\n           */\n\n        }, {\n          key: 'destroy',\n          value: function destroy() {\n            this.reset(false);\n            this.options.onDestroy(this);\n          }\n          /**\r\n           * Reset Typed and optionally restarts\r\n           * @param {boolean} restart\r\n           * @public\r\n           */\n\n        }, {\n          key: 'reset',\n          value: function reset() {\n            var restart = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n            clearInterval(this.timeout);\n            this.replaceText('');\n\n            if (this.cursor && this.cursor.parentNode) {\n              this.cursor.parentNode.removeChild(this.cursor);\n              this.cursor = null;\n            }\n\n            this.strPos = 0;\n            this.arrayPos = 0;\n            this.curLoop = 0;\n\n            if (restart) {\n              this.insertCursor();\n              this.options.onReset(this);\n              this.begin();\n            }\n          }\n          /**\r\n           * Begins the typing animation\r\n           * @private\r\n           */\n\n        }, {\n          key: 'begin',\n          value: function begin() {\n            var _this = this;\n\n            this.options.onBegin(this);\n            this.typingComplete = false;\n            this.shuffleStringsIfNeeded(this);\n            this.insertCursor();\n            if (this.bindInputFocusEvents) this.bindFocusEvents();\n            this.timeout = setTimeout(function () {\n              // Check if there is some text in the element, if yes start by backspacing the default message\n              if (!_this.currentElContent || _this.currentElContent.length === 0) {\n                _this.typewrite(_this.strings[_this.sequence[_this.arrayPos]], _this.strPos);\n              } else {\n                // Start typing\n                _this.backspace(_this.currentElContent, _this.currentElContent.length);\n              }\n            }, this.startDelay);\n          }\n          /**\r\n           * Called for each character typed\r\n           * @param {string} curString the current string in the strings array\r\n           * @param {number} curStrPos the current position in the curString\r\n           * @private\r\n           */\n\n        }, {\n          key: 'typewrite',\n          value: function typewrite(curString, curStrPos) {\n            var _this2 = this;\n\n            if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n              this.el.classList.remove(this.fadeOutClass);\n              if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n            }\n\n            var humanize = this.humanizer(this.typeSpeed);\n            var numChars = 1;\n\n            if (this.pause.status === true) {\n              this.setPauseStatus(curString, curStrPos, true);\n              return;\n            } // contain typing function in a timeout humanize'd delay\n\n\n            this.timeout = setTimeout(function () {\n              // skip over any HTML chars\n              curStrPos = _htmlParserJs.htmlParser.typeHtmlChars(curString, curStrPos, _this2);\n              var pauseTime = 0;\n              var substr = curString.substr(curStrPos); // check for an escape character before a pause value\n              // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n              // single ^ are removed from string\n\n              if (substr.charAt(0) === '^') {\n                if (/^\\^\\d+/.test(substr)) {\n                  var skip = 1; // skip at least 1\n\n                  substr = /\\d+/.exec(substr)[0];\n                  skip += substr.length;\n                  pauseTime = parseInt(substr);\n                  _this2.temporaryPause = true;\n\n                  _this2.options.onTypingPaused(_this2.arrayPos, _this2); // strip out the escape character and pause value so they're not printed\n\n\n                  curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\n\n                  _this2.toggleBlinking(true);\n                }\n              } // check for skip characters formatted as\n              // \"this is a `string to print NOW` ...\"\n\n\n              if (substr.charAt(0) === '`') {\n                while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {\n                  numChars++;\n                  if (curStrPos + numChars > curString.length) break;\n                } // strip out the escape characters and append all the string in between\n\n\n                var stringBeforeSkip = curString.substring(0, curStrPos);\n                var stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);\n                var stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n                curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n                numChars--;\n              } // timeout for any pause after a character\n\n\n              _this2.timeout = setTimeout(function () {\n                // Accounts for blinking while paused\n                _this2.toggleBlinking(false); // We're done with this sentence!\n\n\n                if (curStrPos >= curString.length) {\n                  _this2.doneTyping(curString, curStrPos);\n                } else {\n                  _this2.keepTyping(curString, curStrPos, numChars);\n                } // end of character pause\n\n\n                if (_this2.temporaryPause) {\n                  _this2.temporaryPause = false;\n\n                  _this2.options.onTypingResumed(_this2.arrayPos, _this2);\n                }\n              }, pauseTime); // humanized value for typing\n            }, humanize);\n          }\n          /**\r\n           * Continue to the next string & begin typing\r\n           * @param {string} curString the current string in the strings array\r\n           * @param {number} curStrPos the current position in the curString\r\n           * @private\r\n           */\n\n        }, {\n          key: 'keepTyping',\n          value: function keepTyping(curString, curStrPos, numChars) {\n            // call before functions if applicable\n            if (curStrPos === 0) {\n              this.toggleBlinking(false);\n              this.options.preStringTyped(this.arrayPos, this);\n            } // start typing each new char into existing string\n            // curString: arg, this.el.html: original text inside element\n\n\n            curStrPos += numChars;\n            var nextString = curString.substr(0, curStrPos);\n            this.replaceText(nextString); // loop the function\n\n            this.typewrite(curString, curStrPos);\n          }\n          /**\r\n           * We're done typing the current string\r\n           * @param {string} curString the current string in the strings array\r\n           * @param {number} curStrPos the current position in the curString\r\n           * @private\r\n           */\n\n        }, {\n          key: 'doneTyping',\n          value: function doneTyping(curString, curStrPos) {\n            var _this3 = this; // fires callback function\n\n\n            this.options.onStringTyped(this.arrayPos, this);\n            this.toggleBlinking(true); // is this the final string\n\n            if (this.arrayPos === this.strings.length - 1) {\n              // callback that occurs on the last typed string\n              this.complete(); // quit if we wont loop back\n\n              if (this.loop === false || this.curLoop === this.loopCount) {\n                return;\n              }\n            }\n\n            this.timeout = setTimeout(function () {\n              _this3.backspace(curString, curStrPos);\n            }, this.backDelay);\n          }\n          /**\r\n           * Backspaces 1 character at a time\r\n           * @param {string} curString the current string in the strings array\r\n           * @param {number} curStrPos the current position in the curString\r\n           * @private\r\n           */\n\n        }, {\n          key: 'backspace',\n          value: function backspace(curString, curStrPos) {\n            var _this4 = this;\n\n            if (this.pause.status === true) {\n              this.setPauseStatus(curString, curStrPos, true);\n              return;\n            }\n\n            if (this.fadeOut) return this.initFadeOut();\n            this.toggleBlinking(false);\n            var humanize = this.humanizer(this.backSpeed);\n            this.timeout = setTimeout(function () {\n              curStrPos = _htmlParserJs.htmlParser.backSpaceHtmlChars(curString, curStrPos, _this4); // replace text with base text + typed characters\n\n              var curStringAtPosition = curString.substr(0, curStrPos);\n\n              _this4.replaceText(curStringAtPosition); // if smartBack is enabled\n\n\n              if (_this4.smartBackspace) {\n                // the remaining part of the current string is equal of the same part of the new string\n                var nextString = _this4.strings[_this4.arrayPos + 1];\n\n                if (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {\n                  _this4.stopNum = curStrPos;\n                } else {\n                  _this4.stopNum = 0;\n                }\n              } // if the number (id of character in current string) is\n              // less than the stop number, keep going\n\n\n              if (curStrPos > _this4.stopNum) {\n                // subtract characters one by one\n                curStrPos--; // loop the function\n\n                _this4.backspace(curString, curStrPos);\n              } else if (curStrPos <= _this4.stopNum) {\n                // if the stop number has been reached, increase\n                // array position to next string\n                _this4.arrayPos++; // When looping, begin at the beginning after backspace complete\n\n                if (_this4.arrayPos === _this4.strings.length) {\n                  _this4.arrayPos = 0;\n\n                  _this4.options.onLastStringBackspaced();\n\n                  _this4.shuffleStringsIfNeeded();\n\n                  _this4.begin();\n                } else {\n                  _this4.typewrite(_this4.strings[_this4.sequence[_this4.arrayPos]], curStrPos);\n                }\n              } // humanized value for typing\n\n            }, humanize);\n          }\n          /**\r\n           * Full animation is complete\r\n           * @private\r\n           */\n\n        }, {\n          key: 'complete',\n          value: function complete() {\n            this.options.onComplete(this);\n\n            if (this.loop) {\n              this.curLoop++;\n            } else {\n              this.typingComplete = true;\n            }\n          }\n          /**\r\n           * Has the typing been stopped\r\n           * @param {string} curString the current string in the strings array\r\n           * @param {number} curStrPos the current position in the curString\r\n           * @param {boolean} isTyping\r\n           * @private\r\n           */\n\n        }, {\n          key: 'setPauseStatus',\n          value: function setPauseStatus(curString, curStrPos, isTyping) {\n            this.pause.typewrite = isTyping;\n            this.pause.curString = curString;\n            this.pause.curStrPos = curStrPos;\n          }\n          /**\r\n           * Toggle the blinking cursor\r\n           * @param {boolean} isBlinking\r\n           * @private\r\n           */\n\n        }, {\n          key: 'toggleBlinking',\n          value: function toggleBlinking(isBlinking) {\n            if (!this.cursor) return; // if in paused state, don't toggle blinking a 2nd time\n\n            if (this.pause.status) return;\n            if (this.cursorBlinking === isBlinking) return;\n            this.cursorBlinking = isBlinking;\n\n            if (isBlinking) {\n              this.cursor.classList.add('typed-cursor--blink');\n            } else {\n              this.cursor.classList.remove('typed-cursor--blink');\n            }\n          }\n          /**\r\n           * Speed in MS to type\r\n           * @param {number} speed\r\n           * @private\r\n           */\n\n        }, {\n          key: 'humanizer',\n          value: function humanizer(speed) {\n            return Math.round(Math.random() * speed / 2) + speed;\n          }\n          /**\r\n           * Shuffle the sequence of the strings array\r\n           * @private\r\n           */\n\n        }, {\n          key: 'shuffleStringsIfNeeded',\n          value: function shuffleStringsIfNeeded() {\n            if (!this.shuffle) return;\n            this.sequence = this.sequence.sort(function () {\n              return Math.random() - 0.5;\n            });\n          }\n          /**\r\n           * Adds a CSS class to fade out current string\r\n           * @private\r\n           */\n\n        }, {\n          key: 'initFadeOut',\n          value: function initFadeOut() {\n            var _this5 = this;\n\n            this.el.className += ' ' + this.fadeOutClass;\n            if (this.cursor) this.cursor.className += ' ' + this.fadeOutClass;\n            return setTimeout(function () {\n              _this5.arrayPos++;\n\n              _this5.replaceText(''); // Resets current string if end of loop reached\n\n\n              if (_this5.strings.length > _this5.arrayPos) {\n                _this5.typewrite(_this5.strings[_this5.sequence[_this5.arrayPos]], 0);\n              } else {\n                _this5.typewrite(_this5.strings[0], 0);\n\n                _this5.arrayPos = 0;\n              }\n            }, this.fadeOutDelay);\n          }\n          /**\r\n           * Replaces current text in the HTML element\r\n           * depending on element type\r\n           * @param {string} str\r\n           * @private\r\n           */\n\n        }, {\n          key: 'replaceText',\n          value: function replaceText(str) {\n            if (this.attr) {\n              this.el.setAttribute(this.attr, str);\n            } else {\n              if (this.isInput) {\n                this.el.value = str;\n              } else if (this.contentType === 'html') {\n                this.el.innerHTML = str;\n              } else {\n                this.el.textContent = str;\n              }\n            }\n          }\n          /**\r\n           * If using input elements, bind focus in order to\r\n           * start and stop the animation\r\n           * @private\r\n           */\n\n        }, {\n          key: 'bindFocusEvents',\n          value: function bindFocusEvents() {\n            var _this6 = this;\n\n            if (!this.isInput) return;\n            this.el.addEventListener('focus', function (e) {\n              _this6.stop();\n            });\n            this.el.addEventListener('blur', function (e) {\n              if (_this6.el.value && _this6.el.value.length !== 0) {\n                return;\n              }\n\n              _this6.start();\n            });\n          }\n          /**\r\n           * On init, insert the cursor element\r\n           * @private\r\n           */\n\n        }, {\n          key: 'insertCursor',\n          value: function insertCursor() {\n            if (!this.showCursor) return;\n            if (this.cursor) return;\n            this.cursor = document.createElement('span');\n            this.cursor.className = 'typed-cursor';\n            this.cursor.innerHTML = this.cursorChar;\n            this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n          }\n        }]);\n\n        return Typed;\n      }();\n\n      exports['default'] = Typed;\n      module.exports = exports['default'];\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n\n      var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i];\n\n          for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n              target[key] = source[key];\n            }\n          }\n        }\n\n        return target;\n      };\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if ('value' in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError('Cannot call a class as a function');\n        }\n      }\n\n      var _defaultsJs = __webpack_require__(2);\n\n      var _defaultsJs2 = _interopRequireDefault(_defaultsJs);\n      /**\r\n       * Initialize the Typed object\r\n       */\n\n\n      var Initializer = function () {\n        function Initializer() {\n          _classCallCheck(this, Initializer);\n        }\n\n        _createClass(Initializer, [{\n          key: 'load',\n\n          /**\r\n           * Load up defaults & options on the Typed instance\r\n           * @param {Typed} self instance of Typed\r\n           * @param {object} options options object\r\n           * @param {string} elementId HTML element ID _OR_ instance of HTML element\r\n           * @private\r\n           */\n          value: function load(self, options, elementId) {\n            // chosen element to manipulate text\n            if (typeof elementId === 'string') {\n              self.el = document.querySelector(elementId);\n            } else {\n              self.el = elementId;\n            }\n\n            self.options = _extends({}, _defaultsJs2['default'], options); // attribute to type into\n\n            self.isInput = self.el.tagName.toLowerCase() === 'input';\n            self.attr = self.options.attr;\n            self.bindInputFocusEvents = self.options.bindInputFocusEvents; // show cursor\n\n            self.showCursor = self.isInput ? false : self.options.showCursor; // custom cursor\n\n            self.cursorChar = self.options.cursorChar; // Is the cursor blinking\n\n            self.cursorBlinking = true; // text content of element\n\n            self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent; // html or plain text\n\n            self.contentType = self.options.contentType; // typing speed\n\n            self.typeSpeed = self.options.typeSpeed; // add a delay before typing starts\n\n            self.startDelay = self.options.startDelay; // backspacing speed\n\n            self.backSpeed = self.options.backSpeed; // only backspace what doesn't match the previous string\n\n            self.smartBackspace = self.options.smartBackspace; // amount of time to wait before backspacing\n\n            self.backDelay = self.options.backDelay; // Fade out instead of backspace\n\n            self.fadeOut = self.options.fadeOut;\n            self.fadeOutClass = self.options.fadeOutClass;\n            self.fadeOutDelay = self.options.fadeOutDelay; // variable to check whether typing is currently paused\n\n            self.isPaused = false; // input strings of text\n\n            self.strings = self.options.strings.map(function (s) {\n              return s.trim();\n            }); // div containing strings\n\n            if (typeof self.options.stringsElement === 'string') {\n              self.stringsElement = document.querySelector(self.options.stringsElement);\n            } else {\n              self.stringsElement = self.options.stringsElement;\n            }\n\n            if (self.stringsElement) {\n              self.strings = [];\n              self.stringsElement.style.display = 'none';\n              var strings = Array.prototype.slice.apply(self.stringsElement.children);\n              var stringsLength = strings.length;\n\n              if (stringsLength) {\n                for (var i = 0; i < stringsLength; i += 1) {\n                  var stringEl = strings[i];\n                  self.strings.push(stringEl.innerHTML.trim());\n                }\n              }\n            } // character number position of current string\n\n\n            self.strPos = 0; // current array position\n\n            self.arrayPos = 0; // index of string to stop backspacing on\n\n            self.stopNum = 0; // Looping logic\n\n            self.loop = self.options.loop;\n            self.loopCount = self.options.loopCount;\n            self.curLoop = 0; // shuffle the strings\n\n            self.shuffle = self.options.shuffle; // the order of strings\n\n            self.sequence = [];\n            self.pause = {\n              status: false,\n              typewrite: true,\n              curString: '',\n              curStrPos: 0\n            }; // When the typing is complete (when not looped)\n\n            self.typingComplete = false; // Set the order in which the strings are typed\n\n            for (var i in self.strings) {\n              self.sequence[i] = i;\n            } // If there is some text in the element\n\n\n            self.currentElContent = this.getCurrentElContent(self);\n            self.autoInsertCss = self.options.autoInsertCss;\n            this.appendAnimationCss(self);\n          }\n        }, {\n          key: 'getCurrentElContent',\n          value: function getCurrentElContent(self) {\n            var elContent = '';\n\n            if (self.attr) {\n              elContent = self.el.getAttribute(self.attr);\n            } else if (self.isInput) {\n              elContent = self.el.value;\n            } else if (self.contentType === 'html') {\n              elContent = self.el.innerHTML;\n            } else {\n              elContent = self.el.textContent;\n            }\n\n            return elContent;\n          }\n        }, {\n          key: 'appendAnimationCss',\n          value: function appendAnimationCss(self) {\n            var cssDataName = 'data-typed-js-css';\n\n            if (!self.autoInsertCss) {\n              return;\n            }\n\n            if (!self.showCursor && !self.fadeOut) {\n              return;\n            }\n\n            if (document.querySelector('[' + cssDataName + ']')) {\n              return;\n            }\n\n            var css = document.createElement('style');\n            css.type = 'text/css';\n            css.setAttribute(cssDataName, true);\n            var innerCss = '';\n\n            if (self.showCursor) {\n              innerCss += '\\n        .typed-cursor{\\n          opacity: 1;\\n        }\\n        .typed-cursor.typed-cursor--blink{\\n          animation: typedjsBlink 0.7s infinite;\\n          -webkit-animation: typedjsBlink 0.7s infinite;\\n                  animation: typedjsBlink 0.7s infinite;\\n        }\\n        @keyframes typedjsBlink{\\n          50% { opacity: 0.0; }\\n        }\\n        @-webkit-keyframes typedjsBlink{\\n          0% { opacity: 1; }\\n          50% { opacity: 0.0; }\\n          100% { opacity: 1; }\\n        }\\n      ';\n            }\n\n            if (self.fadeOut) {\n              innerCss += '\\n        .typed-fade-out{\\n          opacity: 0;\\n          transition: opacity .25s;\\n        }\\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\\n          -webkit-animation: 0;\\n          animation: 0;\\n        }\\n      ';\n            }\n\n            if (css.length === 0) {\n              return;\n            }\n\n            css.innerHTML = innerCss;\n            document.body.appendChild(css);\n          }\n        }]);\n\n        return Initializer;\n      }();\n\n      exports['default'] = Initializer;\n      var initializer = new Initializer();\n      exports.initializer = initializer;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      /**\r\n       * Defaults & options\r\n       * @returns {object} Typed defaults & options\r\n       * @public\r\n       */\n      'use strict';\n\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      var defaults = {\n        /**\r\n         * @property {array} strings strings to be typed\r\n         * @property {string} stringsElement ID of element containing string children\r\n         */\n        strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],\n        stringsElement: null,\n\n        /**\r\n         * @property {number} typeSpeed type speed in milliseconds\r\n         */\n        typeSpeed: 0,\n\n        /**\r\n         * @property {number} startDelay time before typing starts in milliseconds\r\n         */\n        startDelay: 0,\n\n        /**\r\n         * @property {number} backSpeed backspacing speed in milliseconds\r\n         */\n        backSpeed: 0,\n\n        /**\r\n         * @property {boolean} smartBackspace only backspace what doesn't match the previous string\r\n         */\n        smartBackspace: true,\n\n        /**\r\n         * @property {boolean} shuffle shuffle the strings\r\n         */\n        shuffle: false,\n\n        /**\r\n         * @property {number} backDelay time before backspacing in milliseconds\r\n         */\n        backDelay: 700,\n\n        /**\r\n         * @property {boolean} fadeOut Fade out instead of backspace\r\n         * @property {string} fadeOutClass css class for fade animation\r\n         * @property {boolean} fadeOutDelay Fade out delay in milliseconds\r\n         */\n        fadeOut: false,\n        fadeOutClass: 'typed-fade-out',\n        fadeOutDelay: 500,\n\n        /**\r\n         * @property {boolean} loop loop strings\r\n         * @property {number} loopCount amount of loops\r\n         */\n        loop: false,\n        loopCount: Infinity,\n\n        /**\r\n         * @property {boolean} showCursor show cursor\r\n         * @property {string} cursorChar character for cursor\r\n         * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\r\n         */\n        showCursor: true,\n        cursorChar: '|',\n        autoInsertCss: true,\n\n        /**\r\n         * @property {string} attr attribute for typing\r\n         * Ex: input placeholder, value, or just HTML text\r\n         */\n        attr: null,\n\n        /**\r\n         * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\r\n         */\n        bindInputFocusEvents: false,\n\n        /**\r\n         * @property {string} contentType 'html' or 'null' for plaintext\r\n         */\n        contentType: 'html',\n\n        /**\r\n         * Before it begins typing\r\n         * @param {Typed} self\r\n         */\n        onBegin: function onBegin(self) {},\n\n        /**\r\n         * All typing is complete\r\n         * @param {Typed} self\r\n         */\n        onComplete: function onComplete(self) {},\n\n        /**\r\n         * Before each string is typed\r\n         * @param {number} arrayPos\r\n         * @param {Typed} self\r\n         */\n        preStringTyped: function preStringTyped(arrayPos, self) {},\n\n        /**\r\n         * After each string is typed\r\n         * @param {number} arrayPos\r\n         * @param {Typed} self\r\n         */\n        onStringTyped: function onStringTyped(arrayPos, self) {},\n\n        /**\r\n         * During looping, after last string is typed\r\n         * @param {Typed} self\r\n         */\n        onLastStringBackspaced: function onLastStringBackspaced(self) {},\n\n        /**\r\n         * Typing has been stopped\r\n         * @param {number} arrayPos\r\n         * @param {Typed} self\r\n         */\n        onTypingPaused: function onTypingPaused(arrayPos, self) {},\n\n        /**\r\n         * Typing has been started after being stopped\r\n         * @param {number} arrayPos\r\n         * @param {Typed} self\r\n         */\n        onTypingResumed: function onTypingResumed(arrayPos, self) {},\n\n        /**\r\n         * After reset\r\n         * @param {Typed} self\r\n         */\n        onReset: function onReset(self) {},\n\n        /**\r\n         * After stop\r\n         * @param {number} arrayPos\r\n         * @param {Typed} self\r\n         */\n        onStop: function onStop(arrayPos, self) {},\n\n        /**\r\n         * After start\r\n         * @param {number} arrayPos\r\n         * @param {Typed} self\r\n         */\n        onStart: function onStart(arrayPos, self) {},\n\n        /**\r\n         * After destroy\r\n         * @param {Typed} self\r\n         */\n        onDestroy: function onDestroy(self) {}\n      };\n      exports['default'] = defaults;\n      module.exports = exports['default'];\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports) {\n      /**\r\n       * TODO: These methods can probably be combined somehow\r\n       * Parse HTML tags & HTML Characters\r\n       */\n      'use strict';\n\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if ('value' in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError('Cannot call a class as a function');\n        }\n      }\n\n      var HTMLParser = function () {\n        function HTMLParser() {\n          _classCallCheck(this, HTMLParser);\n        }\n\n        _createClass(HTMLParser, [{\n          key: 'typeHtmlChars',\n\n          /**\r\n           * Type HTML tags & HTML Characters\r\n           * @param {string} curString Current string\r\n           * @param {number} curStrPos Position in current string\r\n           * @param {Typed} self instance of Typed\r\n           * @returns {number} a new string position\r\n           * @private\r\n           */\n          value: function typeHtmlChars(curString, curStrPos, self) {\n            if (self.contentType !== 'html') return curStrPos;\n            var curChar = curString.substr(curStrPos).charAt(0);\n\n            if (curChar === '<' || curChar === '&') {\n              var endTag = '';\n\n              if (curChar === '<') {\n                endTag = '>';\n              } else {\n                endTag = ';';\n              }\n\n              while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n                curStrPos++;\n\n                if (curStrPos + 1 > curString.length) {\n                  break;\n                }\n              }\n\n              curStrPos++;\n            }\n\n            return curStrPos;\n          }\n          /**\r\n           * Backspace HTML tags and HTML Characters\r\n           * @param {string} curString Current string\r\n           * @param {number} curStrPos Position in current string\r\n           * @param {Typed} self instance of Typed\r\n           * @returns {number} a new string position\r\n           * @private\r\n           */\n\n        }, {\n          key: 'backSpaceHtmlChars',\n          value: function backSpaceHtmlChars(curString, curStrPos, self) {\n            if (self.contentType !== 'html') return curStrPos;\n            var curChar = curString.substr(curStrPos).charAt(0);\n\n            if (curChar === '>' || curChar === ';') {\n              var endTag = '';\n\n              if (curChar === '>') {\n                endTag = '<';\n              } else {\n                endTag = '&';\n              }\n\n              while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {\n                curStrPos--;\n\n                if (curStrPos < 0) {\n                  break;\n                }\n              }\n\n              curStrPos--;\n            }\n\n            return curStrPos;\n          }\n        }]);\n\n        return HTMLParser;\n      }();\n\n      exports['default'] = HTMLParser;\n      var htmlParser = new HTMLParser();\n      exports.htmlParser = htmlParser;\n      /***/\n    }\n    /******/\n    ])\n  );\n});\n\n;","map":null,"metadata":{},"sourceType":"script"}