{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = nodeChildrenToScrollState;\n\nfunction nodeChildrenToScrollState(_ref) {\n  var children = _ref.children,\n      scrollTop = _ref.scrollTop;\n  var list = []; // used to increment children view heights\n\n  var start = 0; // Fix: default props\n  // let { theshold } = this.props\n\n  var theshold = 0.5; // TODO: experiment a map\n\n  for (var i = 0; i < children.length; i++) {\n    var _children$i = children[i],\n        offsetHeight = _children$i.offsetHeight,\n        attributes = _children$i.attributes; // interpreting native values\n\n    var viewHeight = offsetHeight;\n    var end = start + viewHeight; // current position values\n\n    var position = start - scrollTop;\n    var positionRatio = position / offsetHeight;\n    var positionRatioRemainer = positionRatio <= -1 ? 1 : positionRatio >= 1 ? 1 : Math.abs(positionRatio % 1);\n    /* Used for creating navigations and  to links to\n    *  <Link to=\"Home\" />\n    */\n    // Conditionals\n    // FIX: use exact values\n\n    var onView = positionRatio <= theshold && positionRatio >= -theshold;\n    var onFrame = position === scrollTop; // TODO: review active\n    // TODO: addfunction to run on activate()\n\n    var active = onView;\n    list.push({\n      position: position,\n      positionRatio: positionRatio,\n      positionRatioRemainer: positionRatioRemainer,\n      start: start,\n      end: end,\n      viewHeight: viewHeight,\n      onView: onView,\n      active: active,\n      onFrame: onFrame\n    }); // increament based on stacked item's height\n\n    start += offsetHeight;\n  }\n\n  return {\n    children: list\n  };\n}","map":null,"metadata":{},"sourceType":"script"}